# Auto-labels PRs "Approved" on non-maintainer approvals.
# Skips write+/maintain/admin users to highlight community reviews.
# Handles bots/externals/404s/none as allowable; only for open PRs.
# Edge: API errors skip labeling (no job failure); idempotent adds.

name: Auto-label approved PRs (external reviewers only)

on:
  pull_request_review:
    types: [submitted]
  workflow_dispatch:  # Keep for testing
    inputs:
      reviewer_login:
        description: 'Reviewer GitHub handle'
        required: true
      pr_number:
        description: 'PR number'
        required: true
        type: string

permissions:
  issues: write

jobs:
  label_on_approval:
    runs-on: ubuntu-latest
    if: >-
      (github.event_name == 'pull_request_review' && github.event.review.state == 'approved' && github.event.pull_request.state == 'open') ||
      github.event_name == 'workflow_dispatch'
    steps:
    - name: Check PR state
      id: pr_check
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          pr_state="open"
          pr_number="${{ inputs.pr_number }}"
          pr_number=$(echo "$pr_number" | sed 's/^#//')
        else
          pr_state="${{ github.event.pull_request.state }}"
          pr_number="${{ github.event.pull_request.number }}"
        fi
        if [[ "$pr_state" != "open" ]]; then
          echo "::notice::PR is not open (state: $pr_state), skipping label addition"
          echo "should_label=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        echo "::notice::PR is open, proceeding"
        echo "should_label=true" >> $GITHUB_OUTPUT

    - name: Check reviewer permissions
      id: check_permissions
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          reviewer_login="${{ inputs.reviewer_login }}"
          reviewer_type="User"
        else
          reviewer_login="${{ github.actor }}"
          reviewer_type="${{ github.event.review.user.type }}"
        fi
        repo_owner="${{ github.repository_owner }}"
        repo_name="${{ github.event.repository.name }}"

        echo "::notice::Reviewer: $reviewer_login, Type: $reviewer_type"

        # If not a human user (e.g., bot), always label
        if [[ "$reviewer_type" != "User" ]]; then
          echo "should_label=true" >> $GITHUB_OUTPUT
          echo "::notice::Non-human reviewer: Allowing label"
          exit 0
        fi

        # For human users, fetch permission via GitHub API with error handling
        response=$(curl -s -w "\n%{http_code}" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${repo_owner}/${repo_name}/collaborators/${reviewer_login}/permission")

        # Split response body and HTTP code
        http_code=$(echo "$response" | tail -n1)
        response_body=$(echo "$response" | sed '$d')

        echo "::debug::Perms API HTTP Code: $http_code"

        # Handle curl failure (non-zero exit) - skip labeling, no job fail
        if [[ $? -ne 0 ]]; then
          echo "::error::API request failed (curl error): Skipping label"
          echo "should_label=false" >> $GITHUB_OUTPUT
          exit 0
        fi

        # Handle HTTP codes
        if [[ "$http_code" == "404" ]]; then
          echo "::notice::User is not a collaborator (404): Allowing label"
          echo "should_label=true" >> $GITHUB_OUTPUT
          exit 0
        elif [[ "$http_code" != "200" ]]; then
          echo "::warning::Unexpected API response (code: $http_code): Skipping label"
          echo "should_label=false" >> $GITHUB_OUTPUT
          exit 0
        fi

        # For 200, validate JSON and parse permission
        if ! echo "$response_body" | jq . >/dev/null 2>&1; then
          echo "::error::Invalid JSON response: Skipping label"
          echo "should_label=false" >> $GITHUB_OUTPUT
          exit 0
        fi

        permission=$(echo "$response_body" | jq -r '.permission // empty')
        echo "::notice::Permission: $permission"

        # Allow if read/triage/none; skip if write/maintain/admin
        if [[ "$permission" == "read" || "$permission" == "triage" || "$permission" == "none" ]]; then
          echo "should_label=true" >> $GITHUB_OUTPUT
          echo "::notice::Allowing label for non-write+ user (permission: $permission)"
        else
          echo "should_label=false" >> $GITHUB_OUTPUT
          echo "::notice::Skipping label for write+ user (permission: $permission)"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Add Approved label
      if: ${{ steps.pr_check.outputs.should_label == 'true' && steps.check_permissions.outputs.should_label == 'true' }}
      uses: actions-ecosystem/action-add-labels@v1
      with:
        labels: Approved
        github_token: ${{ secrets.RAYCAST_BOT_API_ACCESS_TOKEN }}
        number: ${{ github.event.pull_request.number || inputs.pr_number }}
